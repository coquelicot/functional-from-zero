# vim: set ts=2 sw=2 sts=2 :

# prog ::=
#   term
# term ::=
#   id
#   '\' id expr
#   '(' expr ')'
# expr ::=
#   term
#   term expr

((\prog prog (\v \f f v)) \define

  define (\x x) \id
  define (\g \f \x g (f x)) \.
  define (\f (\x x x) (\x \u f (x x) u)) \Y

  define (\a \b \f f a b) \pair
  define (\p p (\a \b a)) \first
  define (\p p (\a \b b)) \second

  define (\f id) \0
  define (\n \f . f (n f)) \++
  define (++ 0) \1

  define (\n \m m ++ n) \+
  define (\n \m m (+ n) 0) \*
  define (\n \m m (* n) 1) \**

  define (\n first (n (\p pair (second p) (++ (second p))) (pair 0 0))) \--
  define (\n \m m -- n) \-

  define (\c \t \f c (\_ t) f .) \if
  define (\c if c (\_ 0) (\_ 1)) \!
  define (\a \b if a (\_ b) (\_ 0)) \&&
  define (\a \b if a (\_ 1) (\_ b)) \||

  define (\n \m - m n) \<
  define (\n \m - n m) \>
  define (\n \m ! (< n m)) \>=
  define (\n \m ! (> n m)) \<=
  define (\n \m || (< n m) (> n m)) \!=
  define (\n \m ! (!= n m)) \==

  define (
    Y \/ \n \m
      (if (< n m)
        (\_ 0)
        (\_ ++ (/ (- n m) m)))
  ) \/
  define (\n \m - n (* (/ n m) m)) \%

  define (++ 1) \2
  define (++ 2) \3
  define (++ 3) \4
  define (++ 4) \5
  define (++ 5) \6
  define (++ 6) \7
  define (++ 7) \8
  define (++ 8) \9
  define (++ 9) \10

  define (pair 1 0) \[]
  define (\h \t pair 0 (pair h t)) \:
  define (. first second) \head
  define (. second second) \tail
  define first \emp?

  define (
    Y \foldl \f \acc \xs
      if (emp? xs)
        (\_ acc)
        (\_ foldl f (f acc (head xs)) (tail xs))
  ) \foldl
  define (
    Y \foldr \f \acc \xs
      if (emp? xs)
        (\_ acc)
        (\_ f (head xs) (foldr f acc (tail xs)))
  ) \foldr
  define (
    Y \take \n \xs
      if (|| (! n) (emp? xs))
        (\_ [])
        (\_ : (head xs) (take (-- n) (tail xs)))
  ) \take
  define (
    Y \skip \n \xs
      if (|| (! n) (emp? xs))
        (\_ xs)
        (\_ skip (-- n) (tail xs))
  ) \skip

  define (\xs \ys foldr : ys xs) \+++
  define (foldl (\acc \x : x acc) []) \reverse
  define (foldl (\v \x: ++ v) 0) \length
  define (foldr +++ []) \flatten

  define (
    Y \gen \f \acc
      define (f acc) \p
      \u (if (first p)
        (\_ : (second (second p)) (gen f (first (second p))))
        (\_ [])) u
  ) \gen
  define (\acc \v pair 1 (pair acc v)) \yield
  define (pair 0 0) \done

  define (gen (\v yield (++ v) v) 0) \N
  define (\a \b (take (- b a) (skip a N))) \range

  define (
    \f gen \xs
      if (emp? xs)
        (\_ done)
        (\_ yield (tail xs) (f (head xs)))
  ) \map

  define (
    (Y \bin8 \n \xs \c
      if n
        (\_ bin8 (-- n) (: (% c 2) xs) (/ c 2))
        (\_ xs)
    ) 8 []
  ) \bin
  define (foldl (\c \b (+ (* c 2) b)) 0) \chr

# general begin , end
  define (\f, \f; \f. f,) \,
  define (\f, \f; \f. f;) \;
  define (\f, \f; \f. f.) \end
  define (
    \f, \f; \f. \iacc \isel
      (Y \build \acc \fsel
        (fsel f, f; f.)
          build acc)
      iacc isel
  ) \new-begin

  define (** 2 5) \space
  define (++ space) \'!'
  define (++ '!') \'"'
  define (++ '"') \'#'
  define (++ '#') \'$'
  define (++ '$') \'%'
  define (++ '%') \'&'
  define (++ '&') \quote
  define (++ quote) \left_bracket
  define (++ left_bracket) \right_bracket
  define (++ right_bracket) \'*'
  define (++ '*') \'+'
  define (++ '+') \','
  define (++ ',') \'-'
  define (++ '-') \'.'
  define (++ '.') \'/'
  define (++ '/') \'0'
  define (++ '0') \'1'
  define (++ '1') \'2'
  define (++ '2') \'3'
  define (++ '3') \'4'
  define (++ '4') \'5'
  define (++ '5') \'6'
  define (++ '6') \'7'
  define (++ '7') \'8'
  define (++ '8') \'9'
  define (++ '9') \':'
  define (++ ':') \';'
  define (++ ';') \'<'
  define (++ '<') \'='
  define (++ '=') \'>'
  define (++ '>') \'?'
  define (++ '?') \'@'
  define (++ '@') \'A'
  define (++ 'A') \'B'
  define (++ 'B') \'C'
  define (++ 'C') \'D'
  define (++ 'D') \'E'
  define (++ 'E') \'F'
  define (++ 'F') \'G'
  define (++ 'G') \'H'
  define (++ 'H') \'I'
  define (++ 'I') \'J'
  define (++ 'J') \'K'
  define (++ 'K') \'L'
  define (++ 'L') \'M'
  define (++ 'M') \'N'
  define (++ 'N') \'O'
  define (++ 'O') \'P'
  define (++ 'P') \'Q'
  define (++ 'Q') \'R'
  define (++ 'R') \'S'
  define (++ 'S') \'T'
  define (++ 'T') \'U'
  define (++ 'U') \'V'
  define (++ 'V') \'W'
  define (++ 'W') \'X'
  define (++ 'X') \'Y'
  define (++ 'Y') \'Z'
  define (++ 'Z') \'['
  define (++ '[') \back_slash
  define (++ back_slash) \']'
  define (++ ']') \'^'
  define (++ '^') \'_'
  define (++ '_') \'`'
  define (++ '`') \'a'
  define (++ 'a') \'b'
  define (++ 'b') \'c'
  define (++ 'c') \'d'
  define (++ 'd') \'e'
  define (++ 'e') \'f'
  define (++ 'f') \'g'
  define (++ 'g') \'h'
  define (++ 'h') \'i'
  define (++ 'i') \'j'
  define (++ 'j') \'k'
  define (++ 'k') \'l'
  define (++ 'l') \'m'
  define (++ 'm') \'n'
  define (++ 'n') \'o'
  define (++ 'o') \'p'
  define (++ 'p') \'q'
  define (++ 'q') \'r'
  define (++ 'r') \'s'
  define (++ 's') \'t'
  define (++ 't') \'u'
  define (++ 'u') \'v'
  define (++ 'v') \'w'
  define (++ 'w') \'x'
  define (++ 'x') \'y'
  define (++ 'y') \'z'
  define (++ 'z') \'{'
  define (++ '{') \'|'
  define (++ '|') \'}'
  define (++ '}') \'~'
  define 0 \eos
# FIXME 255 as eof
  define (-- (** 2 8)) \eof
  define (++ 9) \endl

  define (
    (Y \build \xs \x
      if x
        (\_ build (: x xs))
        (\_ reverse xs))
    []
  ) \string

  define (
    new-begin
      (\next \xs \x next (: x xs))
      (\next \xs \x next (: x xs))
      (\next \xs reverse xs)
      [] ,
  ) \list

  define (foldl (\v \c (+ (* 10 v) (- c '0'))) 0) \strtol
  define (
    (Y \_ltostr \s \n
      if n
        (\_ _ltostr (: (+ '0' (% n 10)) s) (/ n 10))
        (\_ if (emp? s) (\_ : '0' []) (\_ s)))
    []
  ) \ltostr

# IO a = w -> (a, w)
  define (\w ++ w) \next_w
# IO a -> w -> (a, w)
  define (\io \w io w) \run_io
# IO a -> (a -> IO b) -> IO b
  define (
    \io \f \w
      define (run_io io w) \paw
      define (f (first paw)) \iob
      run_io iob (second paw)
  ) \>>=
# IO a -> IO b -> IO b
  define (\a \b >>= a (\_ b)) \>>
# a -> IO a  (a -> w -> (a, w))
  define pair \return
# IO ()
  define (\w pair (__builtin_p0 w) (next_w w)) \putb_0
# IO ()
  define (\w pair (__builtin_p1 w) (next_w w)) \putb_1
# IO bool
  define (
    define (__builtin_g 0 1) \_getb
    \w pair (_getb w) (next_w w)
  ) \getb
# IO ()
  define (\w pair . w) \pass

# (a -> IO b) -> [a] -> IO [b]
  define (
    \f \xs
      foldr
        (\io \acc
          >>= io \x
          >>= acc \xs
          return (: x xs))
        (return [])
        (map f xs)
  ) \mapM

# do end
  define (
    new-begin
      (\next \io (>>= io))
      (\next \io . next (>> io))
      (\next \io io)
      pass ;
  ) \do
  define , \|
  define do \->
# (do
#   (puts something);
#   (putc endl);
#   (gets) | \str ->
#   (puts something);
#   (gets) | \str ->
#   (puts something);
#   (do
#     (nested statements);
#     (no-semicolon-at-last-statement)
#   end);
#   (no-semicolon-at-last-statement)
# end)

  (\mkio run_io (mkio 0) 0) \_

##### In Monad

  define (. (mapM (\b if b (\_ putb_1) (\_ putb_0))) bin) \putc
  define (mapM putc) \puts
  define (\str do (puts str); (putc endl) end) \putsln

  define (>>= (mapM (\_ getb) (range 0 8)) (. return chr)) \getc
  define (
    Y \gets
      >>= getc \c
      if (|| (== endl c) (== eof c))
        (\_ return [])
        (\_ >>= gets \s return (: c s))
  ) \gets

  define (
    Y \loop
      define (
        Y \gcd \a \b
          if (== b 0)
            (\_ a)
            (\_ gcd b (% a b))
      ) \gcd
      do
        (puts (string 'a' space '=' space eos));
        (gets) | \sa ->
        (puts (string 'b' space '=' space eos));
        (gets) | \sb ->
        (if (|| (== 0 (length sa)) (== 0 (length sb)))
          (\_ pass)
          (\_
            define (gcd (strtol sa) (strtol sb)) \ans
            do
              ((. putsln flatten)
                (list
                  (string 'g' 'c' 'd' left_bracket eos),
                  (sa),
                  (string ',' space eos),
                  (sb),
                  (string right_bracket space '=' space eos),
                  (ltostr ans)
                end));
              loop
            end))
      end
  ) \task-gcd

  task-gcd

##### END
)
