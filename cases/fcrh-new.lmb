# vim: set ts=2 sts=2 sw=2 :

# prologue {{{
((\def
# }}}

# basic util {{{
def (\x x) \id
def (\g \f \x g (f x)) \.
def (\f (\x x x) (\x \u f (x x) u)) \Y
# }}}

# primitive pair {{{
def (\a \b \f f a b) \$pair
def (\p p (\a \b a)) \$first
def (\p p (\a \b b)) \$second
# }}}

# primitive number {{{
def (\f id) \$0
def (\n \f . f (n f)) \$inc
def ($inc $0) \$1 def ($inc $1) \$2 def ($inc $2) \$3
def ($inc $3) \$4 def ($inc $4) \$5 def ($inc $5) \$6
def ($inc $6) \$7 def ($inc $7) \$8 def ($inc $8) \$9
# }}}

# primitive condition {{{
def $0 \$False
def $1 \$True
def (\c \t \f c (\_ t) f .) \$if
def (\a \b $if a (\_ b) (\_ $False)) \$and
def (\a \b $if a (\_ $True) (\_ b)) \$or
def (\c $if c (\_ $False) (\_ $True)) \$not
def (\c $if c (\_ $True) (\_ $False)) \$bool
# }}}

# primitive arithmatic {{{
def (\n \m m $inc n) \$add
def (\n \m . m n) \$mul
def (\n \m m n) \$exp
def (\n $first (n (\p $pair ($second p) ($inc ($second p))) ($pair $0 $0))) \$dec
def (\n \m m $dec n) \$sub

# we must define comparison before we can define div/mod
def (\n \m $bool ($sub m n)) \$lt
def (\n \m $lt m n) \$gt
def (\n \m $not ($lt m n)) \$leq
def (\n \m $not ($lt n m)) \$geq
def (\n \m $or ($lt n m) ($lt m n)) \$neq
def (\n \m $not ($neq n m)) \$eq

def (Y \$div \n \m $if ($lt n m) (\_ $0) (\_ $inc ($div ($sub n m) m))) \$div
def (\n \m $sub n ($mul m ($div n m))) \$mod
# }}}

# primitive list {{{
def ($pair $1 $0) \$[]
def (\x \xs ($pair $0 ($pair x xs))) \$:
def $first \$emp?
def (. $first $second) \$head
def (. $second $second) \$tail

def (
  Y \$foldl \f \acc \xs
    $if ($emp? xs)
      (\_ acc)
      (\_ $foldl f (f acc ($head xs)) ($tail xs))
) \$foldl
def (
  Y \$foldr \f \acc \xs
    $if ($emp? xs)
      (\_ acc)
      (\_ f ($head xs) ($foldr f acc ($tail xs)))
) \$foldr

def (\xs \ys $foldr $: ys xs) \$concat
def ($foldl (\acc \x $: x acc) $[]) \$reverse
def ($foldl (\acc \_ $inc acc) $0) \$length
# }}}

# primitive string {{{
def ($mul $6 $8) \$'0'
def ($add $1 $'0') \$'1' def ($add $2 $'0') \$'2' def ($add $3 $'0') \$'3'
def ($add $4 $'0') \$'4' def ($add $5 $'0') \$'5' def ($add $6 $'0') \$'6'
def ($add $7 $'0') \$'7' def ($add $8 $'0') \$'8' def ($add $9 $'0') \$'9'
def ($inc ($mul $8 $8)) \$'A'
def ($inc $'A') \$'B' def ($inc $'B') \$'C' def ($inc $'C') \$'D' def ($inc $'D') \$'E' def ($inc $'E') \$'F'
def ($inc $'F') \$'G' def ($inc $'G') \$'H' def ($inc $'H') \$'I' def ($inc $'I') \$'J' def ($inc $'J') \$'K'
def ($inc $'K') \$'L' def ($inc $'L') \$'M' def ($inc $'M') \$'N' def ($inc $'N') \$'O' def ($inc $'O') \$'P'
def ($inc $'P') \$'Q' def ($inc $'Q') \$'R' def ($inc $'R') \$'S' def ($inc $'S') \$'T' def ($inc $'T') \$'U'
def ($inc $'U') \$'V' def ($inc $'V') \$'W' def ($inc $'W') \$'X' def ($inc $'X') \$'Y' def ($inc $'Y') \$'Z'
def ($add $7 $'Z') \$'a'
def ($inc $'a') \$'b' def ($inc $'b') \$'c' def ($inc $'c') \$'d' def ($inc $'d') \$'e' def ($inc $'e') \$'f'
def ($inc $'f') \$'g' def ($inc $'g') \$'h' def ($inc $'h') \$'i' def ($inc $'i') \$'j' def ($inc $'j') \$'k'
def ($inc $'k') \$'l' def ($inc $'l') \$'m' def ($inc $'m') \$'n' def ($inc $'n') \$'o' def ($inc $'o') \$'p'
def ($inc $'p') \$'q' def ($inc $'q') \$'r' def ($inc $'r') \$'s' def ($inc $'s') \$'t' def ($inc $'t') \$'u'
def ($inc $'u') \$'v' def ($inc $'v') \$'w' def ($inc $'w') \$'x' def ($inc $'x') \$'y' def ($inc $'y') \$'z'
def ($inc $'z') \$'{' def ($inc $'{') \$'|' def ($inc $'|') \$'}'
def $0 \$EOS
def ($mul $4 $8) \$spc
def ($inc $9) \$endl

def (
  Y \$streq \xs \ys
    $if ($or ($emp? xs) ($emp? ys))
      (\_ $and ($emp? xs) ($emp? ys))
      (\_ $if ($eq ($head xs) ($head ys))
        (\_ $streq ($tail xs) ($tail ys))
        (\_ $False))
) \$streq

def (
  \c \xss
  $if ($emp? xss)
    (\_ $[])
    (\_ $tail ($foldr (\xs \ys $: c ($concat xs ys)) $[] xss))
) \$join

def ((Y \$str \s \c $if c (\_ $str ($: c s)) (\_ $reverse s)) $[]) \$STR
def (
  def (
    (Y \$c2b \bs \n \v
      $if n
        (\_ $c2b ($: ($mod v $2) bs) ($dec n) ($div v $2))
        (\_ bs)) $[] $8
  ) \$c2b
  . ($foldl (\_ \b $if b __builtin_p1 __builtin_p0) .) $c2b
) \$putc
def ($foldl (\_ $putc) .) \$puts
# }}}

# type system building block {{{
# typed val = wrap (func, tid, val)
def (\v \f f v) \$wrap
def (\v v id) \$unwrap
def (\f \t \v $wrap (\g g f t v)) \$new
def (\v ($unwrap v) (\f \t \v v)) \$to_raw
def (\v ($unwrap v) (\f \t \v t)) \$type_id

def ($STR $'g' $'e' $'t' $EOS) \$"get"
def ($STR $'b' $'u' $'t' $EOS) \$"but"
def ($STR $'e' $'x' $'p' $'e' $'c' $'t' $EOS) \$"expect"
def ($STR $'t' $'y' $'p' $'e' $EOS) \$"type"
def ($STR $'e' $'r' $'r' $'o' $'r' $EOS) \$"error"
def ($STR $'o' $'v' $'e' $'r' $'f' $'l' $'o' $'w' $EOS) \$"overflow"
def ($STR $'T' $'r' $'u' $'e' $EOS) \$"True"
def ($STR $'F' $'a' $'l' $'s' $'e' $EOS) \$"False"

def (Y \$abort \str (Y \gg \x gg \_ x) ($puts str)) \$abort
def (\tid \v $streq tid ($type_id v)) \$instance_of
def (
  \tid_exp \tid_get
  $abort ($join $spc (
    $: $"type" (
    $: $"error" (
    $: $"expect" (
    $: tid_exp (
    $: $"but" (
    $: tid_get (
    $: $"get" (
    $: ($STR $endl $EOS) $[])))))))
  ))
) \$raise_type_error
def (
  \tid \v
    $if ($instance_of tid v)
      (\_ v)
      (\_ $raise_type_error tid ($type_id v))
) \$type_check

def $to_raw \value_of
def (\f \r f ($wrap r)) \infix

# Func / Symbol
def ($STR $'F' $'u' $'n' $'c' $EOS) \Func
def ($STR $'S' $'y' $'m' $'b' $'o' $'l' $EOS) \Symbol
def (\tid $new (\_ $raise_type_error Func tid) tid) \new
def (\lmb $new (\f \t \v \_ \_ lmb ($new f t v)) Func lmb) \lambda
# value of symbol is a identifier string
def (\sym \lmb $new (\f \t \v \_ \_ lmb ($new f t v)) Symbol sym) \$symbol

def (\tid \lmb lambda (. lmb ($type_check tid))) \$arg_type_check
def lambda \Any:
def ($arg_type_check Func) \Func:
def ($arg_type_check Symbol) \Symbol:
# }}}

# Bool & condition {{{
def ($STR $'B' $'o' $'o' $'l' $EOS) \Bool
def ($arg_type_check Bool) \Bool:
def (new Bool $0) \False
def (new Bool $1) \True

def (Bool: \c \t \f ($if (value_of c) (\_ t) (\_ f)) True) \if
def (Bool: \a Bool: \b if a (\_ b) (\_ False)) \and
def (Bool: \a Bool: \b if a (\_ True) (\_ b)) \or
def (Bool: \c if c (\_ False) (\_ True)) \not
# }}}

# Pair {{{
def ($STR $'P' $'a' $'i' $'r' $EOS) \Pair
def ($arg_type_check Pair) \Pair:

def (Any: \a Any: \b new Pair ($pair a b)) \pair
def (Pair: \p $first (value_of p)) \first
def (Pair: \p $second (value_of p)) \second
# }}}

# Int & arith {{{
# Int :: $[$1/$0] little endian
# impl without type
def (\a $if ($emp? a) (\_ a) (\_ $: $0 a)) \_shl
def (
  Y \inc \n
    $if ($emp? n)
      (\_ $: $1 $[])
      (\_ $if ($head n)
        (\_ $: $0 (inc ($tail n)))
        (\_ $: $1 ($tail n)))
) \inc

def (
  Y \dec \n
    $if ($emp? n)
      (\_ $abort $"overflow")
      (\_ $if ($head n)
        (\_ _shl ($tail n))
        (\_ $: $1 (dec ($tail n))))
) \dec

def (
  Y \add \a \b
    $if ($emp? a) (\_ b) \_
    $if ($emp? b) (\_ a) \_
    $if ($and ($head a) ($head b))
      (\_ $: $0 (add (inc ($tail a)) ($tail b)))
      (\_ $: ($or ($head a) ($head b)) (add ($tail a) ($tail b)))
) \add

def (
  Y \sub \a \b
    $if ($emp? b) (\_ a) \_
    $if ($emp? a) (\_ $abort $"overflow") \_
    $if ($eq ($head a) ($head b))
      (\_ _shl (sub ($tail a) ($tail b)))
      (\_ $if ($gt ($head a) ($head b))
        (\_ $: $1 (sub ($tail a) ($tail b)))
        (\_ $: $1 (sub (dec ($tail a)) ($tail b))))
) \sub

def (
  def (
    Y \_lt \a \b
      $if ($emp? a)
        (\_ $False)
        (\_ $if ($neq ($head a) ($head b))
          (\_ $lt ($head a) ($head b))
          (\_ _lt ($tail a) ($tail b)))
  ) \_lt
  \a \b
    $if ($neq ($length a) ($length b))
      (\_ $lt ($length a) ($length b))
      (\_ _lt ($reverse a) ($reverse b))
) \lt

def (
  Y \mul \a \b
    $if ($or ($emp? a) ($emp? b))
      (\_ $[])
      (\_
        def (_shl (mul a ($tail b))) \tmp
        $if ($head b)
          (\_ add a tmp)
          (\_ tmp))
) \mul

def (
  Y \div \a \b
    $if (lt a b)
      (\_ $pair $[] a)
      (\_
        def (div ($tail a) b) \tmp
        def (_shl ($first tmp)) \res
        def (_shl ($second tmp)) \rem
        def ($if ($head a) (\_ inc rem) (\_ rem)) \rem
        $if (lt rem b)
          (\_ $pair res rem)
          (\_ $pair (inc res) (sub rem b)))
) \div

def (
  Y \pow \a \b
    $if ($emp? b)
      (\_ $: $1 $[])
      (\_
        def (pow a ($tail b)) \tmp
        def (mul tmp tmp) \tmp
        $if ($head b)
          (\_ mul tmp a)
          (\_ tmp))
) \pow

# typed
def ($STR $'I' $'n' $'t' $EOS) \Int
def ($arg_type_check Int) \Int:

def (Int: \a new Int (inc (value_of a))) \inc
def (Int: \a new Int (dec (value_of a))) \dec
def (Int: \a Int: \b new Int (add (value_of a) (value_of b))) \add
def (Int: \a Int: \b new Int (sub (value_of a) (value_of b))) \sub
def (Int: \a Int: \b new Int (mul (value_of a) (value_of b))) \mul
def (Int: \a Int: \b new Int ($second (div (value_of a) (value_of b)))) \mod
def (Int: \a Int: \b new Int ($first (div (value_of a) (value_of b)))) \div
def (Int: \a Int: \b new Int (pow (value_of a) (value_of b))) \pow

def (Int: \a Int: \b new Bool (lt (value_of a) (value_of b))) \lt
def (Int: \a Int: \b lt b a) \gt
def (Int: \a Int: \b not (lt b a)) \leq
def (Int: \a Int: \b not (lt a b)) \geq
def (Int: \a Int: \b or (lt a b) (lt b a)) \neq
def (Int: \a Int: \b not (neq a b)) \eq

def (infix add) \+
def (infix sub) \-
def (infix mul) \*
def (infix div) \/
def (infix mod) \%
def (infix pow) \**
def (infix lt) \<
def (infix gt) \>
def (infix leq) \<=
def (infix geq) \>=
def (infix neq) \!=
def (infix eq) \==

def (new Int $[]) \0
def (inc 0) \1 def (inc 1) \2 def (inc 2) \3 def (inc 3) \4 def (inc 4) \5
def (inc 5) \6 def (inc 6) \7 def (inc 7) \8 def (inc 8) \9 def (inc 9) \10

# helper to map between primitive num & typed num
def (\n n inc 0) \$to_int
def ((Y \_do \v Int: \n if (0 == n) (\_ v) (\_ _do ($inc v) (dec n))) $0) \$from_int
# }}}

# List {{{
def ($STR $'L' $'i' $'s' $'t' $EOS) \List
def ($arg_type_check List) \List:
def (new List $[]) \[]

def (Any: \x List: \xs new List ($: x (value_of xs))) \:
def (List: \xs $head (value_of xs)) \head
def (List: \xs new List ($tail (value_of xs))) \tail
def (List: \xs new Bool ($emp? (value_of xs))) \emp?

def (Func: \f Any: \acc List: \xs $foldl f acc (value_of xs)) \foldl
def (Func: \f Any: \acc List: \xs $foldr f acc (value_of xs)) \foldr
def (List: \xs List: \ys new List ($concat (value_of xs) (value_of ys))) \concat
def (List: \xs new List ($reverse (value_of xs))) \reverse
def (List: \xs foldl (Int: \n Any: \_ inc n) 0 xs) \length

def (List: \xs value_of xs) \$from_list
def (\xs new List xs) \$to_list
# list builder
def ($symbol ($STR $'}' $EOS) (\_ $abort $"error")) \}
def (
  $symbol ($STR $'{' $EOS) (
    (Y \build List: \xs Any: \x
      $if ($instance_of Symbol x)
        (\_ $if ($streq (value_of x) (value_of }))
          (\_ reverse xs)
          (\_ $abort $"error"))
        (\_ build (: x xs))) []
)) \{
# }}}

# Char {{{
def ($STR $'C' $'h' $'a' $'r' $EOS) \Char
def ($arg_type_check Char) \Char:

def (Char: \c $to_int (value_of c)) \ord
def (
  Int: \v
    if (v >= (2 ** 8))
      (\_ $abort $"overflow")
      (\_ new Char ($from_int v))
) \chr

def (new Char $'0') \'0' def (new Char $'1') \'1' def (new Char $'2') \'2' def (new Char $'3') \'3' def (new Char $'4') \'4'
def (new Char $'5') \'5' def (new Char $'6') \'6' def (new Char $'7') \'7' def (new Char $'8') \'8' def (new Char $'9') \'9'
def (new Char $'A') \'A' def (new Char $'B') \'B' def (new Char $'C') \'C' def (new Char $'D') \'D' def (new Char $'E') \'E'
def (new Char $'F') \'F' def (new Char $'G') \'G' def (new Char $'H') \'H' def (new Char $'I') \'I' def (new Char $'J') \'J'
def (new Char $'K') \'K' def (new Char $'L') \'L' def (new Char $'M') \'M' def (new Char $'N') \'N' def (new Char $'O') \'O'
def (new Char $'P') \'P' def (new Char $'Q') \'Q' def (new Char $'R') \'R' def (new Char $'S') \'S' def (new Char $'T') \'T'
def (new Char $'U') \'U' def (new Char $'V') \'V' def (new Char $'W') \'W' def (new Char $'X') \'X' def (new Char $'Y') \'Y'
def (new Char $'Z') \'Z'
def (new Char $'a') \'a' def (new Char $'b') \'b' def (new Char $'c') \'c' def (new Char $'d') \'d' def (new Char $'e') \'e'
def (new Char $'f') \'f' def (new Char $'g') \'g' def (new Char $'h') \'h' def (new Char $'i') \'i' def (new Char $'j') \'j'
def (new Char $'k') \'k' def (new Char $'l') \'l' def (new Char $'m') \'m' def (new Char $'n') \'n' def (new Char $'o') \'o'
def (new Char $'p') \'p' def (new Char $'q') \'q' def (new Char $'r') \'r' def (new Char $'s') \'s' def (new Char $'t') \'t'
def (new Char $'u') \'u' def (new Char $'v') \'v' def (new Char $'w') \'w' def (new Char $'x') \'x' def (new Char $'y') \'y'
def (new Char $'z') \'z'
def (new Char $'{') \'{' def (new Char $'|') \'|' def (new Char $'}') \'}'
def (chr (5 * 7)) \'#'
# FIXME: sooo ugly
def (chr (5 * 8)) \lbrace
def (chr (inc (5 * 8))) \rbrace
def (chr ((9 * 10) + 2)) \bslash
def (chr ((9 * 10) + 5)) \'_'
def (new Char $spc) \spc
def (new Char $endl) \endl

def (Char: \a Char: \b new Bool ($lt (value_of a) (value_of b))) \Char::lt
def (Char: \a Char: \b new Bool ($gt (value_of a) (value_of b))) \Char::gt
def (Char: \a Char: \b new Bool ($leq (value_of a) (value_of b))) \Char::leq
def (Char: \a Char: \b new Bool ($geq (value_of a) (value_of b))) \Char::geq
def (Char: \a Char: \b new Bool ($neq (value_of a) (value_of b))) \Char::neq
def (Char: \a Char: \b new Bool ($eq (value_of a) (value_of b))) \Char::eq

def (\v new Char v) \$to_char
def (Char: \c value_of c) \$from_char
# }}}

# String {{{
# just List of Char
def (\lmb List: \xs lmb (foldr (Char: \c List: \str : c str) [] xs)) \String:
def (\xs $to_list ($foldr (\c \ys $: ($to_char c) ys) $[] xs)) \$to_str
def (String: \xs $foldr (Char: \c \ys $: ($from_char c) ys) $[] ($from_list xs)) \$from_str

def (
  Y \_lt String: \a String: \b
    if (emp? b) (\_ False) \_
    if (emp? a) (\_ True) \_
    if (Char::neq (head a) (head b))
      (\_ Char::lt (head a) (head b))
      (\_ _lt (tail a) (tail b))
) \String::lt
# }}}

# Type!!!! {{{
# with these builtin types, we may enhance our type system!!!


# we must hide the native tid string with an special type "Type"
def ($from_str({ 'T' 'y' 'p' 'e' })) \Type
def ($arg_type_check Type) \Type:
def (String: \xs \p p (new Type ($from_str xs)) ($arg_type_check ($from_str xs))) \type

# redefine builtin types
def (new Type Bool) \Bool
def (new Type Pair) \Pair
def (new Type Int) \Int
def (new Type List) \List
def (new Type Char) \Char
# last
def (new Type Type) \Type

# redefine new
def (Type: \t new (value_of t)) \new

# utils
def (Type: \t Any: \v $if ($instance_of (value_of t) v) (\_ True) (\_ False)) \instance_of
def (String: \str $abort ($from_str str)) \abort
# }}}

# Maybe {{{
type ({ 'M' 'a' 'y' 'b' 'e' }) \Maybe \Maybe:
def (Any: \v new Maybe (pair True v)) \Just
def (new Maybe (pair False False)) \Nothing
def (Maybe: \m first (value_of m)) \is_just
def (Maybe: \m not (is_just m)) \is_nothing
def (
  Maybe: \m
  if (is_just m)
    (\_ second (value_of m))
    (\_ abort ({ 'C' 'a' 'n' 'n' 'o' 't' spc 'u' 's' 'e' spc 'N' 'o' 't' 'h' 'i' 'n' 'g' spc 'a' 's' spc 'J' 'u' 's' 't' }))
) \from_just
# }}}

# IO {{{
# IO = w -> (w, a)
type ({ 'W' 'o' 'r' 'l' 'd' }) \World \World:
type ({ 'I' 'O' }) \IO \IO:
type ({ 'D' 'u' 'm' 'm' 'y' }) \Dummy \Dummy:
def (IO: \io World: \w (value_of io) w) \_run_io_with
def (IO: \io second (_run_io_with io (new World 0))) \_run_io

# a -> IO a
def (Any: \v new IO (World: \w pair w v)) \return
# IO a -> (a -> IO b) -> IO b
def (infix (
  # XXX: untyped lmb
  IO: \io \lmb
    new IO (
      World: \w
        def (_run_io_with io w) \p
        _run_io_with (lmb (second p)) (first p))
)) \>>=

# (a -> IO b) -> [a] -> IO [b]
def (
  Func: \f
    foldr (
      # a -> IO [b] -> IO [b]
      Any: \a IO: \acc
      (f a) >>= \b
      acc >>= \bs
      return (: b bs)
    ) (return [])
) \mapM

# builtin io
def (
  Int: \b
  new IO (World: \w pair w (
    if (b == 0)
      (\_ new Dummy (__builtin_p0 b))
      (\_ new Dummy (__builtin_p1 b))))
) \putb
def (
  Char: \c
  (Y \putc Int: \n Int: \v
    if (0 == n)
      (\_ return [])
      (\_
        putc (n - 1) (v / 2) >>= \acc
        putb (v % 2) >>= \v
        return (: v acc))) 8 (ord c)
) \putc
def (mapM putc) \puts
def (new IO (World: \w pair w (__builtin_g (Just 0) (Just 1) Nothing .))) \getb
def (
  (Y \getc Int: \n Int: \v
    if (0 == n)
      (\_ return (Just (chr v)))
      (\_ getb >>= \m
        if (is_nothing m)
          (\_ return Nothing)
          (\_ getc (n - 1) ((v * 2) + (from_just m))))) 8 0
) \getc
def (
  (Y \gets String: \str
    getc >>= \c
    if (is_nothing c)
      # what if we already have something in str?
      (\_ return Nothing)
      # TODO: char compare
      (\_ if ((ord (from_just c)) == (ord endl))
        (\_ return (Just (reverse (: endl str))))
        (\_ gets (: (from_just c) str)))) []
) \gets

# Enter IO
(\p _run_io (p .)) \_
# }}}

# Map {{{

type ({ 'M' 'a' 'p' }) \Map \Map:
def (new Map (pair True True)) \_nil
def (
  String: \key Any: \val Map: \lch Map: \rch
  new Map (pair False (pair (pair key val) (pair lch rch)))
) \_new_node
def (Map: \m first (value_of m)) \_is_nil
def (Map: \m first (second (value_of m))) \_node_vk
def (Map: \m first (_node_vk m)) \_node_key
def (Map: \m second (_node_vk m)) \_node_val
def (Map: \m first (second (second (value_of m)))) \_node_lch
def (Map: \m second (second (second (value_of m)))) \_node_rch

def _nil \EmptyMap
def (
  Y \lookup Map: \m String: \key
    if (_is_nil m)
      (\_ Nothing) \_
    if (String::lt key (_node_key m))
      (\_ lookup (_node_lch m) key) \_
    if (String::lt (_node_key m) key)
      (\_ lookup (_node_rch m) key) \_
    Just (_node_val m)
) \Map::lookup
def (
  Y \insert Map: \m String: \key Any: \val
    if (_is_nil m)
      (\_ _new_node key val _nil _nil) \_
    if (String::lt key (_node_key m))
      (\_ _new_node (_node_key m) (_node_val m) (insert (_node_lch m) key val) (_node_rch m)) \_
    if (String::lt (_node_key m) key)
      (\_ _new_node (_node_key m) (_node_val m) (_node_lch m) (insert (_node_rch m) key val)) \_
    _new_node key val (_node_lch m) (_node_rch m)
) \Map::insert

# }}}

# reader

def (
  Char: \c
  if (Char::eq c spc) (\_ True) \_
  if (Char::eq c endl) (\_ True) \_
  False
) \is_space

def (
  Y \is_comment String: \str
    if (emp? str)
      (\_ False)
      (\_ if (is_space (head str))
        (\_ is_comment (tail str))
        (\_ Char::eq (head str) '#'))
) \is_comment

def (
  Y \read_all
    gets >>= \ms
    if (is_nothing ms)
      (\_ return [])
      (\_
        def (from_just ms) \line
        read_all >>= \rest
        if (is_comment line)
          (\_ return rest)
          (\_ return (concat line rest)))
) \read_all

# tokenizer

def (
  Char: \ch
  if (Char::eq ch lbrace) (\_ True) \_
  if (Char::eq ch rbrace) (\_ True) \_
  if (Char::eq ch bslash) (\_ True) \_
  False
) \is_spe

def (
  Y \tokenize String: \str

    if (emp? str)
      (\_ []) \_

    def (head str) \ch
    if (is_space ch)
      (\_ tokenize (tail str)) \_
    if (is_spe ch)
      (\_ : ({ ch }) (tokenize (tail str))) \_

    (Y \get_ident String: \rid Char: \ch String: \str
      if (or (is_space ch) (is_spe ch))
        (\_ : (reverse rid) (tokenize (: ch str))) \_
      if (emp? str)
        (\_ : (reverse (: ch rid)) []) \_
      get_ident (: ch rid) (head str) (tail str)) [] ch (tail str)
) \tokenize

# parser

# lmb = (expr, (arg, env))
# expr = env -> IO lmb

def (
  Y \parse_single_expr List: \toks

    def (
      Bool: \pop_rb List: \toks
        def (parse_single_expr toks) \p
        (Y \parse_multi_expr Func: \func List: \toks
          if (emp? toks)
            (\_ abort ({ 'Q' 'Q' })) \_
          if (Char::eq (head (head toks)) rbrace)
            (\_ if (pop_rb)
              (\_ pair func (tail toks))
              (\_ pair func toks)) \_
          def (parse_single_expr toks) \p
          def (
            Map: \m
            func m >>= \lfunc
            (first p) m >>= \larg
            (first lfunc) (Map::insert (second (second lfunc)) (first (second lfunc)) larg)
          ) \apply
          parse_multi_expr apply (second p)) (first p) (second p)
    ) \parse_multi_expr

    if (emp? toks)
      (\_ abort ({ 'Q' 'Q' })) \_

    def (head toks) \tok
    if (Char::eq (head tok) rbrace)
      (\_ abort ({ 'Q' 'Q' 'Q' })) \_

    if (Char::eq (head tok) lbrace)
      (\_ parse_multi_expr True (tail toks)) \_

    if (Char::eq (head tok) bslash)
      # lambda
      (\_
        def (head (tail toks)) \arg
        def (tail (tail toks)) \toks
        if (is_spe (head arg))
          (\_ abort ({ 'Q' })) \_
        def (parse_multi_expr False toks) \p
        pair (Map: \m return (pair (first p) (pair arg m))) (second p)
      ) \_

    # ident
    pair (Map: \m return (from_just (Map::lookup m tok))) (tail toks)
) \parse_single_expr

read_all >>= \prog
def (parse_single_expr (tokenize prog)) \result

if (not (emp? (second result)))
  (\_ abort ({ 'I' 'n' 'v' 'a' 'l' 'i' 'd' })) \_
def (first result) \expr

def (pair (Map: \_ abort ({ 'g' 'g' })) (pair ({ '_' }) EmptyMap)) \dummy

def EmptyMap \m
def (
  Map::insert
    m
    ({ '_' '_' 'b' 'u' 'i' 'l' 't' 'i' 'n' '_' 'p' '0' })
    (pair (Map: \m putb 0 >>= \_ return dummy) (pair ({ '_' }) EmptyMap))
) \m
def (
  Map::insert
    m
    ({ '_' '_' 'b' 'u' 'i' 'l' 't' 'i' 'n' '_' 'p' '1' })
    (pair (Map: \m putb 1 >>= \_ return dummy) (pair ({ '_' }) EmptyMap))
) \m
def (
  Map::insert
    m
    ({ '_' '_' 'b' 'u' 'i' 'l' 't' 'i' 'n' '_' 'g' })
    (pair (
      Map: \m return (pair (
        Map: \m return (pair (
          Map: \m return (pair (
            Map: \m abort ({ 'T' 'O' 'D' 'O' })
          ) (pair ({ '_' }) m))
        ) (pair ({ '3' }) m))
      ) (pair ({ '2' }) m))
    ) (pair ({ '1' }) EmptyMap))
) \m
expr m

# epilogue {{{
) \v \f f v)
# }}}
